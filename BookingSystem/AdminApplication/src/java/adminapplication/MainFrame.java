/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package adminapplication;

import entity.Amenities;
import entity.Reservation;
import entity.Room;
import entity.RoomAmenities;
import entity.RoomType;
import java.awt.Dialog;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.ButtonGroup;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.ListModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Hemal Patel
 */
public class MainFrame extends javax.swing.JFrame {

    /**
     * Creates new form MainFrame
     */
    public Room selectedRoom;
    public RoomType selectedRoomType;
    public Amenities selectedAmenities;
    public MainFrame() {
        initComponents();
        selectedRoom = new Room();
        selectedRoomType = new RoomType();
        selectedAmenities = new Amenities();
        allAmenitiesList.setModel(new DefaultListModel());
        List<Amenities> amenitiesList = Main.entityAccessorSession.getAll(Amenities.class);    
        DefaultListModel allAmenititesModel = new DefaultListModel();
        for(Amenities a : amenitiesList)
        {
            allAmenititesModel.addElement(a.getDescription());
        }
        allAmenitiesList.setModel(allAmenititesModel);
        
        List<RoomType> roomTypeList = Main.entityAccessorSession.getAll(RoomType.class);
        for(RoomType r : roomTypeList)
        {
            roomTypeDropdown.addItem(r.getType());
        }
        
        for(String f : Main.floorList)
        {
            floorDropdown.addItem(f);
            reportRoomByFloorDrapdown.addItem(f);
        }
                
        for(String c : Main.capacityList)
        {
            roomTypeCapacityDropdown.addItem(c);
        }
        
        DefaultTableModel model = (DefaultTableModel)reportTable.getModel();

        int rowCount = model.getRowCount();
        //Remove rows one by one from the end of the table
        for (int i = rowCount - 1; i >= 0; i--) {
            model.removeRow(i);
        }
                
        selectedAmenitiesList.setModel(new DefaultListModel());
        ButtonGroup bG = new ButtonGroup();
        bG.add(radioButtonNo);
        bG.add(radioButtonYes);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        idTextField = new javax.swing.JTextField();
        roomNameTextField = new javax.swing.JTextField();
        roomTypeDropdown = new javax.swing.JComboBox();
        floorDropdown = new javax.swing.JComboBox();
        radioButtonYes = new javax.swing.JRadioButton();
        radioButtonNo = new javax.swing.JRadioButton();
        addButton = new javax.swing.JButton();
        updateButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        allAmenitiesList = new javax.swing.JList();
        jLabel12 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        selectedAmenitiesList = new javax.swing.JList();
        moveRightSingleBotton = new javax.swing.JButton();
        moveRightAllBotton = new javax.swing.JButton();
        moveLeftSingleBotton = new javax.swing.JButton();
        moveLeftAllBotton = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        searchButton = new javax.swing.JButton();
        errorMessageTextField = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        roomTypeIdTextField = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        roomTypeCapacityDropdown = new javax.swing.JComboBox();
        jLabel8 = new javax.swing.JLabel();
        roomTypeNameTextField = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        roomTypeNightlyCostTextField = new javax.swing.JTextField();
        roomTypeAddButton = new javax.swing.JButton();
        roomTypeUpdateButton = new javax.swing.JButton();
        roomTypeSearchButton = new javax.swing.JButton();
        roomTpyeErrorMessageTextField = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        amenitiesIdTextField = new javax.swing.JTextField();
        amenitiesNameTextField = new javax.swing.JTextField();
        amenitiesAddButton = new javax.swing.JButton();
        amenitiesUpdateButton = new javax.swing.JButton();
        amenitiesSearchButton = new javax.swing.JButton();
        amenitiesErrorMessageTextField = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        reportTable = new javax.swing.JTable();
        jLabel15 = new javax.swing.JLabel();
        reportRoomByFloorDrapdown = new javax.swing.JComboBox();
        reportRoomByFloorSearchButton = new javax.swing.JButton();
        reportErrorMessageTextField = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        reportLowerValueTextField = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        reportHigherValueTextField = new javax.swing.JTextField();
        reportRoomByPriceSearchButton = new javax.swing.JButton();
        jLabel18 = new javax.swing.JLabel();
        reportFirstDate = new org.jdesktop.swingx.JXDatePicker();
        jLabel19 = new javax.swing.JLabel();
        reportSecondDate = new org.jdesktop.swingx.JXDatePicker();
        reportRomsByBookingsSearchButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("id :");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Room Name :");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Room Type :");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("Floor :");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText("Usable :");

        idTextField.setEditable(false);

        roomNameTextField.setToolTipText("Please Enter Room Name");

        roomTypeDropdown.setToolTipText("Please Select Room Type");

        floorDropdown.setToolTipText("Please Select Room Floor");

        radioButtonYes.setText("Yes");

        radioButtonNo.setText("No");

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        updateButton.setText("Update");
        updateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateButtonActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(allAmenitiesList);

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel12.setText("Amenities :");

        jScrollPane2.setViewportView(selectedAmenitiesList);

        moveRightSingleBotton.setText(">");
        moveRightSingleBotton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveRightSingleBottonActionPerformed(evt);
            }
        });

        moveRightAllBotton.setText(">>");
        moveRightAllBotton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveRightAllBottonActionPerformed(evt);
            }
        });

        moveLeftSingleBotton.setText("<");
        moveLeftSingleBotton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveLeftSingleBottonActionPerformed(evt);
            }
        });

        moveLeftAllBotton.setText("<<");

        jLabel13.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jLabel13.setText("All Amenities :");

        jLabel14.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        jLabel14.setText("Selected Amenities :");

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        errorMessageTextField.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        errorMessageTextField.setForeground(new java.awt.Color(255, 51, 51));
        errorMessageTextField.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(roomNameTextField)
                                        .addComponent(idTextField)
                                        .addComponent(roomTypeDropdown, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(floorDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(radioButtonYes)
                                        .addGap(18, 18, 18)
                                        .addComponent(radioButtonNo))))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(searchButton)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel12)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(addButton)
                                        .addGap(18, 18, 18)
                                        .addComponent(updateButton))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(6, 6, 6)))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(10, 10, 10)
                                        .addComponent(moveRightSingleBotton, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(12, 12, 12)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(moveLeftSingleBotton, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(moveRightAllBotton)
                                            .addComponent(moveLeftAllBotton))))
                                .addGap(36, 36, 36)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel14)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel13))
                        .addGap(0, 426, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(errorMessageTextField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {moveLeftAllBotton, moveLeftSingleBotton, moveRightAllBotton, moveRightSingleBotton});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(errorMessageTextField)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel1)
                        .addComponent(idTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(roomNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13)
                    .addComponent(jLabel14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(roomTypeDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(floorDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(radioButtonYes)
                                .addComponent(radioButtonNo)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(moveRightSingleBotton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(moveRightAllBotton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(moveLeftSingleBotton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(moveLeftAllBotton))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addGap(29, 29, 29)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updateButton)
                    .addComponent(addButton)
                    .addComponent(searchButton))
                .addGap(94, 94, 94))
        );

        jTabbedPane1.addTab("Room", jPanel1);

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setText("id :");

        roomTypeIdTextField.setToolTipText("Read-only unique ID");
        roomTypeIdTextField.setEnabled(false);

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel7.setText("Capacity :");

        roomTypeCapacityDropdown.setToolTipText("Please Select Room Capacity");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel8.setText("Room Type :");

        roomTypeNameTextField.setToolTipText("Please Enter Room Type");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel9.setText("Nightly Cost :");

        roomTypeNightlyCostTextField.setToolTipText("Enter Nightly Cost");

        roomTypeAddButton.setText("Add");
        roomTypeAddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomTypeAddButtonActionPerformed(evt);
            }
        });

        roomTypeUpdateButton.setText("Update");
        roomTypeUpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomTypeUpdateButtonActionPerformed(evt);
            }
        });

        roomTypeSearchButton.setText("Search");
        roomTypeSearchButton.setToolTipText("");
        roomTypeSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                roomTypeSearchButtonActionPerformed(evt);
            }
        });

        roomTpyeErrorMessageTextField.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        roomTpyeErrorMessageTextField.setForeground(new java.awt.Color(255, 51, 51));
        roomTpyeErrorMessageTextField.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel6))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(roomTypeNameTextField)
                                    .addComponent(roomTypeCapacityDropdown, 0, 134, Short.MAX_VALUE)
                                    .addComponent(roomTypeNightlyCostTextField)
                                    .addComponent(roomTypeIdTextField)))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(roomTypeSearchButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(roomTypeAddButton)
                                .addGap(18, 18, 18)
                                .addComponent(roomTypeUpdateButton))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(roomTpyeErrorMessageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 812, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(roomTpyeErrorMessageTextField)
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(roomTypeIdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(roomTypeNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(roomTypeCapacityDropdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(roomTypeNightlyCostTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(roomTypeAddButton)
                    .addComponent(roomTypeUpdateButton)
                    .addComponent(roomTypeSearchButton))
                .addContainerGap(266, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("RoomType", jPanel2);

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel10.setText("id : ");

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel11.setText("Amenities : ");

        amenitiesIdTextField.setToolTipText("Read-only Amenities ID");
        amenitiesIdTextField.setEnabled(false);

        amenitiesNameTextField.setToolTipText("Please Enter Amenities Name");

        amenitiesAddButton.setText("Add");
        amenitiesAddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                amenitiesAddButtonActionPerformed(evt);
            }
        });

        amenitiesUpdateButton.setText("Update");
        amenitiesUpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                amenitiesUpdateButtonActionPerformed(evt);
            }
        });

        amenitiesSearchButton.setText("Search");
        amenitiesSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                amenitiesSearchButtonActionPerformed(evt);
            }
        });

        amenitiesErrorMessageTextField.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        amenitiesErrorMessageTextField.setForeground(new java.awt.Color(255, 51, 51));
        amenitiesErrorMessageTextField.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel11)
                                    .addComponent(jLabel10))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(amenitiesIdTextField)
                                    .addComponent(amenitiesNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(amenitiesSearchButton)
                                .addGap(18, 18, 18)
                                .addComponent(amenitiesAddButton)
                                .addGap(18, 18, 18)
                                .addComponent(amenitiesUpdateButton))))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(amenitiesErrorMessageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 841, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(amenitiesErrorMessageTextField)
                .addGap(25, 25, 25)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(amenitiesIdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(amenitiesNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(amenitiesAddButton)
                    .addComponent(amenitiesUpdateButton)
                    .addComponent(amenitiesSearchButton))
                .addContainerGap(321, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Amenities", jPanel3);

        reportTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        reportTable.setEnabled(false);
        jScrollPane3.setViewportView(reportTable);

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel15.setText("Room by Floor : ");

        reportRoomByFloorSearchButton.setText("Search");
        reportRoomByFloorSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reportRoomByFloorSearchButtonActionPerformed(evt);
            }
        });

        reportErrorMessageTextField.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        reportErrorMessageTextField.setForeground(new java.awt.Color(255, 51, 51));
        reportErrorMessageTextField.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);

        jLabel16.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel16.setText("Room by Price between :");

        jLabel17.setText("AND");

        reportRoomByPriceSearchButton.setText("Search");
        reportRoomByPriceSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reportRoomByPriceSearchButtonActionPerformed(evt);
            }
        });

        jLabel18.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel18.setText("Room bookings between :");

        jLabel19.setText("AND");

        reportRomsByBookingsSearchButton.setText("Search");
        reportRomsByBookingsSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reportRomsByBookingsSearchButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(reportErrorMessageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 1013, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGap(60, 60, 60)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel16)
                                    .addComponent(jLabel15)
                                    .addComponent(jLabel18))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(reportRoomByFloorDrapdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(reportLowerValueTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)
                                    .addComponent(reportFirstDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(reportRoomByFloorSearchButton))
                                    .addGroup(jPanel4Layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(jPanel4Layout.createSequentialGroup()
                                                .addComponent(jLabel19)
                                                .addGap(18, 18, 18)
                                                .addComponent(reportSecondDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                            .addGroup(jPanel4Layout.createSequentialGroup()
                                                .addComponent(jLabel17)
                                                .addGap(18, 18, 18)
                                                .addComponent(reportHigherValueTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(18, 18, 18)
                                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(reportRoomByPriceSearchButton)
                                            .addComponent(reportRomsByBookingsSearchButton))))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(reportErrorMessageTextField)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(reportRoomByFloorDrapdown, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(reportRoomByFloorSearchButton))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(reportLowerValueTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(reportHigherValueTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(reportRoomByPriceSearchButton)
                    .addComponent(jLabel17))
                .addGap(18, 18, 18)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel18)
                        .addComponent(reportFirstDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel19)
                        .addComponent(reportSecondDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(reportRomsByBookingsSearchButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(60, 60, 60))
        );

        jTabbedPane1.addTab("Reports", jPanel4);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1))
        );

        jTabbedPane1.getAccessibleContext().setAccessibleName("room");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        
        if(!roomNameTextField.getText().equals(""))
        {
            errorMessageTextField.setText("");
            selectedRoom = Main.entityAccessorSession.namedQuery("Room.findByRoomName","roomName", roomNameTextField.getText());
            ClearAll();
            if(selectedRoom != null)
            {
                roomNameTextField.setText(selectedRoom.getRoomName());
                idTextField.setText(selectedRoom.getId().toString());
                
                /*List<RoomType> roomTypeList = Main.entityAccessorSession.getAll(RoomType.class);
                for(RoomType r : roomTypeList)
                {
                    roomTypeDropdown.addItem(r.getType());
                }
                */
                roomTypeDropdown.setSelectedItem(selectedRoom.getRoomTypeId().getType());
                
                /*for(String f : Main.floorList)
                {
                    floorDropdown.addItem(f);
                }
                */
                floorDropdown.setSelectedItem(selectedRoom.getFloor());
                
                if(selectedRoom.getUsable())
                    radioButtonYes.setSelected(true);
                else
                    radioButtonNo.setSelected(true);
                
                /*List<Amenities> amenitiesList = Main.entityAccessorSession.getAll(Amenities.class);
                
                DefaultListModel allAmenititesModel = new DefaultListModel();
                for(Amenities a : amenitiesList)
                {
                    allAmenititesModel.addElement(a.getDescription());
                }
                allAmenitiesList.setModel(allAmenititesModel);*/
                

                List<RoomAmenities> roomAmenitiesList = Main.entityAccessorSession.getAll(RoomAmenities.class);
                DefaultListModel selectedAmenititesModel = new DefaultListModel();
                for(RoomAmenities a : roomAmenitiesList)
                {
                    if(a.getRoomId().getId().equals(selectedRoom.getId()))
                        selectedAmenititesModel.addElement(a.getAmenitiesId().getDescription());
                }
                selectedAmenitiesList.setModel(selectedAmenititesModel);
               errorMessageTextField.setText("");
            }
            else
            {
               errorMessageTextField.setText("SEARCH : Provide Valid Room Number to search"); 
            }
        }
        else
        {
            errorMessageTextField.setText("SEARCH : Room Number is required for Search");
        }
    }//GEN-LAST:event_searchButtonActionPerformed

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        if(!roomNameTextField.getText().equals(""))
        {
            int n = JOptionPane.showConfirmDialog(null,
                    "Are you sure you want to add Room ?",
                    "Add Question",
                    JOptionPane.YES_NO_OPTION);
            if(n == JOptionPane.YES_OPTION)
            {
                selectedRoom = new Room();
                selectedRoom.setRoomName(roomNameTextField.getText());
                RoomType rt = Main.entityAccessorSession.namedQuery("RoomType.findByType", "type" , roomTypeDropdown.getSelectedItem().toString());
                selectedRoom.setRoomTypeId(rt);
                selectedRoom.setFloor(Integer.parseInt(floorDropdown.getSelectedItem().toString()));
                selectedRoom.setUsable(radioButtonYes.isSelected() ? true : false);


                //selectedRoom = Main.entityAccessorSession.namedQuery("Room.findByRoomName", "roomName", selectedRoom.getRoomName());
                List<Amenities> amenitiesList = Main.entityAccessorSession.getAll(Amenities.class);
                DefaultListModel selectedList = (DefaultListModel)selectedAmenitiesList.getModel();

                List<RoomAmenities> raList = new ArrayList<RoomAmenities>();
                for(int i = 0; i < selectedList.size(); i++)
                {
                    for(Amenities a : amenitiesList)
                    {
                        if(a.getDescription().equals(selectedList.getElementAt(i)))
                        {
                            RoomAmenities ra = new RoomAmenities();
                            ra.setRoomId(selectedRoom);
                            ra.setAmenitiesId(a);
                            //Main.entityAccessorSession.insert(ra);
                            raList.add(ra);
                            break;
                        }
                    }
                }
                selectedRoom.setRoomAmenitiesCollection(raList);
                Main.entityAccessorSession.insert(selectedRoom);
                JOptionPane.showMessageDialog(null,
                "Room Added Successfully");
                ClearAll();
            }
        }
    }//GEN-LAST:event_addButtonActionPerformed

    private void updateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateButtonActionPerformed
        if(!roomNameTextField.getText().equals(""))
        {
            selectedRoom.setRoomName(roomNameTextField.getText());
            RoomType rt = Main.entityAccessorSession.namedQuery("RoomType.findByType", "type" , roomTypeDropdown.getSelectedItem().toString());
            selectedRoom.setRoomTypeId(rt);
            selectedRoom.setFloor(Integer.parseInt(floorDropdown.getSelectedItem().toString()));
            selectedRoom.setUsable(radioButtonYes.isSelected());
            /*
            List<RoomAmenities> tempRA = Main.entityAccessorSession.getAll(RoomAmenities.class);
            List<RoomAmenities> ra = new ArrayList<RoomAmenities>();
            for(RoomAmenities ra : tempRA)
            {
                if(ra.getRoomId().getId().equals(selectedRoom))
            }
            */
            
            Main.entityAccessorSession.update(selectedRoom);
            errorMessageTextField.setText("");
        }
        else
        {
            errorMessageTextField.setText("UPDATE : Please provide room name");
        }
    }//GEN-LAST:event_updateButtonActionPerformed

    private void moveRightSingleBottonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveRightSingleBottonActionPerformed
        // TODO add your handling code here:
        List<String> selectedList = allAmenitiesList.getSelectedValuesList();
        if(selectedList.size() > 0)
        {
            DefaultListModel amenititesModel = (DefaultListModel)selectedAmenitiesList.getModel();
            DefaultListModel allAmenititesModel = (DefaultListModel)allAmenitiesList.getModel();
            for(String s : selectedList)
            {
                if(!amenititesModel.contains(s))
                {
                    amenititesModel.addElement(s);
                    errorMessageTextField.setText("");
                    allAmenititesModel.removeElement(s);
                }
                else
                {
                    errorMessageTextField.setText("AMENITIES SELECTION : Amenities already added");
                }
            }
            //selectedAmenitiesList.setModel(amenititesModel);
        }
    }//GEN-LAST:event_moveRightSingleBottonActionPerformed

    private void moveRightAllBottonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveRightAllBottonActionPerformed
        //List<String> selectedList = allAmenitiesList.getSelectedValuesList();
        DefaultListModel allAmenititesModel = (DefaultListModel)allAmenitiesList.getModel();
        DefaultListModel selecteAamenititesModel = (DefaultListModel)selectedAmenitiesList.getModel();
        if(allAmenititesModel.size() > 0)
        {
            selecteAamenititesModel.removeAllElements();
            //DefaultListModel amenititesModel = (DefaultListModel)selectedAmenitiesList.getModel();
            for(int i = 0; i < allAmenititesModel.size(); i++)
            {
                selecteAamenititesModel.addElement(allAmenititesModel.getElementAt(i));
            }
            //selectedAmenitiesList.setModel(amenititesModel);
        }
    }//GEN-LAST:event_moveRightAllBottonActionPerformed

    private void moveLeftSingleBottonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveLeftSingleBottonActionPerformed
        
        List<String> selectedList = selectedAmenitiesList.getSelectedValuesList();
        if(selectedList.size() > 0)
        {
            DefaultListModel amenititesModel = (DefaultListModel)selectedAmenitiesList.getModel();
            DefaultListModel allAmenititesModel = (DefaultListModel)allAmenitiesList.getModel();
            for(String s : selectedList)
            {
                if(!allAmenititesModel.contains(s))
                {
                    allAmenititesModel.addElement(s);
                    errorMessageTextField.setText("");
                    amenititesModel.removeElement(s);
                }
                else
                {
                    errorMessageTextField.setText("AMENITIES SELECTION : Amenities already added");
                }
            }
            //selectedAmenitiesList.setModel(amenititesModel);
        }
    }//GEN-LAST:event_moveLeftSingleBottonActionPerformed

    private void roomTypeSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomTypeSearchButtonActionPerformed
        
        if(!roomTypeNameTextField.getText().equals(""))
        {
            roomTpyeErrorMessageTextField.setText("");
            selectedRoomType = Main.entityAccessorSession.namedQuery("RoomType.findByType","type", roomTypeNameTextField.getText());
            ClearAllRoomType();
            if(selectedRoomType != null)
            {
                roomTypeIdTextField.setText(selectedRoomType.getId().toString());
                roomTypeNameTextField.setText(selectedRoomType.getType());

                roomTypeCapacityDropdown.setSelectedItem(Integer.toString(selectedRoomType.getCapacity()));
                roomTypeNightlyCostTextField.setText(Double.toString(selectedRoomType.getNightlyCost()));
                roomTpyeErrorMessageTextField.setText("");
            }
            else
            {
               roomTpyeErrorMessageTextField.setText("SEARCH : Provide Valid Room Type to search"); 
            }
        }
        else
        {
            roomTpyeErrorMessageTextField.setText("SEARCH : Room Type(Name) is required for Search");
        }
        
    }//GEN-LAST:event_roomTypeSearchButtonActionPerformed

    private void roomTypeAddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomTypeAddButtonActionPerformed
        
        if(!roomTypeNameTextField.getText().equals("") && !roomTypeNightlyCostTextField.getText().equals(""))
        {
            roomTpyeErrorMessageTextField.setText("");
            int n = JOptionPane.showConfirmDialog(null,
                    "Are you sure you want to add Room Type ?",
                    "Add Room Type Question",
                    JOptionPane.YES_NO_OPTION);
            if(n == JOptionPane.YES_OPTION)
            {
                selectedRoomType = new RoomType();
                selectedRoomType.setType(roomTypeNameTextField.getText());
                selectedRoomType.setCapacity(Integer.parseInt(roomTypeCapacityDropdown.getSelectedItem().toString()));
                selectedRoomType.setNightlyCost(Double.parseDouble(roomTypeNightlyCostTextField.getText()));
                
                Main.entityAccessorSession.insert(selectedRoomType);
                JOptionPane.showMessageDialog(null,
                "Room Type Added Successfully");
                ClearAll();
            }
        }
        else
        {
            roomTpyeErrorMessageTextField.setText("ADD : Please provide all required field ! ");
        }
    }//GEN-LAST:event_roomTypeAddButtonActionPerformed

    private void roomTypeUpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roomTypeUpdateButtonActionPerformed
        if(!roomTypeNameTextField.getText().equals("") && !roomTypeNightlyCostTextField.getText().equals(""))
        {
            roomTpyeErrorMessageTextField.setText("");
            int n = JOptionPane.showConfirmDialog(null,
                    "Are you sure you want to update Room Type ?",
                    "Upadate Room Type Question",
                    JOptionPane.YES_NO_OPTION);
            if(n == JOptionPane.YES_OPTION)
            {
            
                selectedRoomType.setId(Integer.parseInt(roomTypeIdTextField.getText()));
                selectedRoomType.setType(roomTypeNameTextField.getText());
                selectedRoomType.setCapacity(Integer.parseInt(roomTypeCapacityDropdown.getSelectedItem().toString()));
                selectedRoomType.setNightlyCost(Double.parseDouble(roomTypeNightlyCostTextField.getText()));

                Main.entityAccessorSession.update(selectedRoomType);
                JOptionPane.showMessageDialog(null,
                "Room Type Updated Successfully");
                ClearAllRoomType();
            }
        }
        else
        {
            roomTpyeErrorMessageTextField.setText("UPDATE : Please provide all required information");
        }
    }//GEN-LAST:event_roomTypeUpdateButtonActionPerformed

    private void amenitiesSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_amenitiesSearchButtonActionPerformed
        if(!amenitiesNameTextField.getText().equals(""))
        {
            amenitiesErrorMessageTextField.setText("");
            selectedAmenities = Main.entityAccessorSession.namedQuery("Amenities.findByDescription", "description", amenitiesNameTextField.getText());
            if(selectedAmenities != null)
            {
                amenitiesIdTextField.setText(selectedAmenities.getId().toString());
                amenitiesNameTextField.setText(selectedAmenities.getDescription());
            }
            else
            {
                amenitiesErrorMessageTextField.setText("SEARCH : Invalid amenity name is provided");
            }
        }
        else
        {
            amenitiesErrorMessageTextField.setText("SEARCH : Please provide Amenity name");
        }
    }//GEN-LAST:event_amenitiesSearchButtonActionPerformed

    private void amenitiesAddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_amenitiesAddButtonActionPerformed
        if(!amenitiesNameTextField.getText().equals(""))
        {
            amenitiesErrorMessageTextField.setText("");
            int n = JOptionPane.showConfirmDialog(null,
                    "Are you sure you want to add Amenities ?",
                    "Add Amenities Question",
                    JOptionPane.YES_NO_OPTION);
            if(n == JOptionPane.YES_OPTION)
            {
                amenitiesErrorMessageTextField.setText("");
                selectedAmenities = new Amenities();
                selectedAmenities.setDescription(amenitiesNameTextField.getText());
                Main.entityAccessorSession.insert(selectedAmenities);
                JOptionPane.showMessageDialog(null,
                "Amenities Added Successfully");
                ClearAll();
            }
        }
        else
        {
            amenitiesErrorMessageTextField.setText("ADD : Please provide all required fields");
        }
    }//GEN-LAST:event_amenitiesAddButtonActionPerformed

    private void amenitiesUpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_amenitiesUpdateButtonActionPerformed
        if(!amenitiesNameTextField.getText().equals(""))
        {
            amenitiesErrorMessageTextField.setText("");
            int n = JOptionPane.showConfirmDialog(null,
                    "Are you sure you want to update Amenities ?",
                    "Update Amenities Question",
                    JOptionPane.YES_NO_OPTION);
            if(n == JOptionPane.YES_OPTION)
            {
                selectedAmenities.setDescription(amenitiesNameTextField.getText());
                Main.entityAccessorSession.update(selectedAmenities);
                JOptionPane.showMessageDialog(null,
                "Amenities Updated Successfully");
            }
        }
        else
        {
            amenitiesErrorMessageTextField.setText("UPDATE : Please provide all required fields");
        }
    }//GEN-LAST:event_amenitiesUpdateButtonActionPerformed

    private void reportRoomByFloorSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reportRoomByFloorSearchButtonActionPerformed
        
        reportErrorMessageTextField.setText("");
        List<Room> roomList = Main.entityAccessorSession.getAll(Room.class);
        List<String> columnNames = new ArrayList<String>();
        columnNames.add("ID");
        columnNames.add("Room Name");
        columnNames.add("Room Type");
        columnNames.add("Usable");
        DefaultTableModel model = (DefaultTableModel)reportTable.getModel();
        
        int rowCount = model.getRowCount();
        //Remove rows one by one from the end of the table
        for (int i = rowCount - 1; i >= 0; i--) {
            model.removeRow(i);
        }
        //DefaultTableModel model = new DefaultTableModel(null, columnNames.toArray());
        boolean foundRoom = false;
        model.setColumnIdentifiers(columnNames.toArray());
        for(Room r : roomList)
        {
            if(r.getFloor() == Integer.parseInt(reportRoomByFloorDrapdown.getSelectedItem().toString()))
            {
                foundRoom = true;
                List<String> data = new ArrayList<String>();
                data.add(r.getId().toString());
                data.add(r.getRoomName());
                data.add(r.getRoomTypeId().getType());
                data.add(r.getUsable() ? "Yes" : "NO");
                model.addRow(data.toArray());
            }
        }
        if(!foundRoom)
        {
            reportErrorMessageTextField.setText("No room Found on given floor");
        }
    }//GEN-LAST:event_reportRoomByFloorSearchButtonActionPerformed

    private void reportRoomByPriceSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reportRoomByPriceSearchButtonActionPerformed
        if(!reportLowerValueTextField.getText().equals("") && !reportHigherValueTextField.getText().equals(""))
        {
            reportErrorMessageTextField.setText("");
            double lowerPrice = Double.parseDouble(reportLowerValueTextField.getText());
            double higherPrice = Double.parseDouble(reportHigherValueTextField.getText());
            if(lowerPrice > higherPrice)
            {
                reportErrorMessageTextField.setText("Lower price should be less than higher.");
            }
            else
            {
                List<Room> roomList = Main.entityAccessorSession.getAll(Room.class);
                List<String> columnNames = new ArrayList<String>();
                columnNames.add("ID");
                columnNames.add("Room Name");
                columnNames.add("Room Type");
                columnNames.add("Price");
                columnNames.add("Usable");
                DefaultTableModel model = (DefaultTableModel)reportTable.getModel();

                int rowCount = model.getRowCount();
                //Remove rows one by one from the end of the table
                for (int i = rowCount - 1; i >= 0; i--) {
                    model.removeRow(i);
                }

                boolean foundRoom = false;
                model.setColumnIdentifiers(columnNames.toArray());
                for(Room r : roomList)
                {
                    if(r.getRoomTypeId().getNightlyCost() >= lowerPrice && r.getRoomTypeId().getNightlyCost() <= higherPrice)
                    {
                        foundRoom = true;
                        List<String> data = new ArrayList<String>();
                        data.add(r.getId().toString());
                        data.add(r.getRoomName());
                        data.add(r.getRoomTypeId().getType());
                        data.add(Double.toString(r.getRoomTypeId().getNightlyCost()));
                        data.add(r.getUsable() ? "Yes" : "NO");
                        model.addRow(data.toArray());
                    }
                }
                if(!foundRoom)
                {
                    reportErrorMessageTextField.setText("No room Found in given price range");
                }
            }
        }
        else
        {
            reportErrorMessageTextField.setText("SEARCH : Please provide lower and higer both price");
        }
    }//GEN-LAST:event_reportRoomByPriceSearchButtonActionPerformed

    private void reportRomsByBookingsSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reportRomsByBookingsSearchButtonActionPerformed
        if(reportFirstDate.getDate() != null && reportSecondDate.getDate() != null)
        {
            Date firstDate = reportFirstDate.getDate();
            Date secondDate = reportSecondDate.getDate();
            List<Reservation> reservationList = Main.entityAccessorSession.getAll(Reservation.class);
            
            
            List<String> columnNames = new ArrayList<String>();
            columnNames.add("Room Name");
            columnNames.add("Customer Name");
            columnNames.add("Date In");
            columnNames.add("Date Out");
            DefaultTableModel model = (DefaultTableModel)reportTable.getModel();

            int rowCount = model.getRowCount();
            //Remove rows one by one from the end of the table
            for (int i = rowCount - 1; i >= 0; i--) {
                model.removeRow(i);
            }

            boolean foundReservation = false;
            model.setColumnIdentifiers(columnNames.toArray());


            for(Reservation r : reservationList)
            {
                              
                if((r.getDateIn().compareTo(firstDate) == 0) ||
                        (r.getDateOut().compareTo(firstDate) == 0) ||
                        (r.getDateOut().compareTo(secondDate) == 0) ||
                        (r.getDateIn().compareTo(secondDate) == 0) ||
                        ((r.getDateOut().compareTo(firstDate) > 0) && (r.getDateIn().compareTo(firstDate) < 0)) ||
                        ((r.getDateIn().compareTo(secondDate) < 0) && (r.getDateOut().compareTo(secondDate) > 0)) ||
                        ((r.getDateIn().compareTo(firstDate) > 0) && (r.getDateOut().compareTo(secondDate) <0)))       
                {
                    reportErrorMessageTextField.setText("");
                    foundReservation = true;
                    List<String> data = new ArrayList<String>();
                    data.add(r.getRoomId().getRoomName());
                    data.add(r.getCustomerId().getName());
                    data.add(r.getDateIn().toString());
                    data.add(r.getDateOut().toString());
                    
                    model.addRow(data.toArray());
                }
            }
            if(!foundReservation)
            {
                reportErrorMessageTextField.setText("No resevation between this range");
            }
        }
        else
        {
            reportErrorMessageTextField.setText("SEARCH : Please provide both the dates !");
        }
    }//GEN-LAST:event_reportRomsByBookingsSearchButtonActionPerformed

    private void ClearAll()
    {
        idTextField.setText("");
        roomNameTextField.setText("");
        DefaultListModel selectedAmenititesModel = (DefaultListModel) selectedAmenitiesList.getModel();
        selectedAmenititesModel.removeAllElements();
        errorMessageTextField.setText("");
    }
    
    private void ClearAllRoomType() {
        roomTypeIdTextField.setText("");
        roomTypeNameTextField.setText("");
        roomTypeNightlyCostTextField.setText("");
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JList allAmenitiesList;
    private javax.swing.JButton amenitiesAddButton;
    private javax.swing.JLabel amenitiesErrorMessageTextField;
    private javax.swing.JTextField amenitiesIdTextField;
    private javax.swing.JTextField amenitiesNameTextField;
    private javax.swing.JButton amenitiesSearchButton;
    private javax.swing.JButton amenitiesUpdateButton;
    private javax.swing.JLabel errorMessageTextField;
    private javax.swing.JComboBox floorDropdown;
    private javax.swing.JTextField idTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JButton moveLeftAllBotton;
    private javax.swing.JButton moveLeftSingleBotton;
    private javax.swing.JButton moveRightAllBotton;
    private javax.swing.JButton moveRightSingleBotton;
    private javax.swing.JRadioButton radioButtonNo;
    private javax.swing.JRadioButton radioButtonYes;
    private javax.swing.JLabel reportErrorMessageTextField;
    private org.jdesktop.swingx.JXDatePicker reportFirstDate;
    private javax.swing.JTextField reportHigherValueTextField;
    private javax.swing.JTextField reportLowerValueTextField;
    private javax.swing.JButton reportRomsByBookingsSearchButton;
    private javax.swing.JComboBox reportRoomByFloorDrapdown;
    private javax.swing.JButton reportRoomByFloorSearchButton;
    private javax.swing.JButton reportRoomByPriceSearchButton;
    private org.jdesktop.swingx.JXDatePicker reportSecondDate;
    private javax.swing.JTable reportTable;
    private javax.swing.JTextField roomNameTextField;
    private javax.swing.JLabel roomTpyeErrorMessageTextField;
    private javax.swing.JButton roomTypeAddButton;
    private javax.swing.JComboBox roomTypeCapacityDropdown;
    private javax.swing.JComboBox roomTypeDropdown;
    private javax.swing.JTextField roomTypeIdTextField;
    private javax.swing.JTextField roomTypeNameTextField;
    private javax.swing.JTextField roomTypeNightlyCostTextField;
    private javax.swing.JButton roomTypeSearchButton;
    private javax.swing.JButton roomTypeUpdateButton;
    private javax.swing.JButton searchButton;
    private javax.swing.JList selectedAmenitiesList;
    private javax.swing.JButton updateButton;
    // End of variables declaration//GEN-END:variables

    
}
